keynotes from experiments:
1. given that the ADC collects data at 250k, if the sample rate from logic analyzer is 500k, there's a, (100% almost), chance that data is lost if filter is applied, because doubling the frequency isn't quite enough

2. Due to pi zero's cpu constraint, it can't acquire data, filter and compress on the fly. Taking compression off the equation is still no good. Plan to test if take out the filter could help.

3. Files are too large in general. To split the files, use split -d -a4 -b 50000000 0005 0005-

sigrok related!!!! Likely no need to go through the following process again because you can just mirror the images
--------------------------------------------
installation
--------------------------------------------
Use this website as the sole reference for installation. Building is required.

https://sigrok.org/wiki/Linux

With dependencies installed, most lib are installed using something like the following just with the right name:

$ git clone git://sigrok.org/libsigrok
$ git clone git://sigrok.org/libsigrokdecode
$ git clone git://sigrok.org/sigrok-firmware
$ git clone git://sigrok.org/sigrok-cli
$ cd libsigrok (and the rest)
$ ./autogen.sh
$ ./configure  (seems to check if anything is missing)
$ make
$ sudo make install

git clone git://sigrok.org/sigrok-cli
cd sigrok-cli
./autogen.sh
./configure
make
sudo make install

Here are the libraries that I have installed to get it working: 

libsigrok (takes a long time to autogen and make)
libsigrokdecode
sigrok-firmware
sigrok-cli (the one used to collect data, the others are dependencies)



-----Dependency-----
Here are the dependency for each libraries:

libsigrok:
sudo apt-get install git-core gcc g++ make autoconf autoconf-archive automake libtool pkg-config libglib2.0-dev libglibmm-2.4-dev libzip-dev libusb-1.0-0-dev libftdi1-dev check doxygen python-numpy  python-dev python-gi-dev python-setuptools swig default-jdk

libsigrokdecode:
sudo apt-get install git-core gcc make autoconf automake libtool pkg-config libglib2.0-dev python3-dev

sigrok-firmware:
None

sigrok-cli:
sudo apt-get install git-core gcc make autoconf automake libtool pkg-config libglib2.0-dev

---------Notice----------
Most stuffs are covered by libsigrok's dependencies
Java part will fail but that's fine


------------------


The dependencies for each library are taken care of by the apt-get part for each section.

-----------------

after installation, config the library to system path by:

sudo ldconfig /usr/local/lib

--------------------------------------------
saleae 16 specific
--------------------------------------------
One need to extract the hardware specific firmware to make cli work with saleae. A tool called "sigrok-fwextract-saleae-logic16" is used to extract the firmware. Link: http://sigrok.org/gitweb/?p=sigrok-util.git;a=tree;f=firmware/saleae-logic16. Included in the folder "Useful_Files".

This tool seems to rob firmware out of the firmware files out of the official Saleae software, which is name "Logic". RPI runs 32-bit linux OS, so the tool requires a old version of the "Logic" software. Also included in the folder "Useful_Files".

Copy the extraction tools, (just three files), to the unzipped Logic directory. Use the following commands that are on Pi: "python3 ./sigrok-fwextract-saleae-logic16 Logic". The instructions are extracted from this forum page: http://sigrok-devel.narkive.com/0ONHBMFH/getting-saleae-logic16-running-under-sigrok-for-windows-extracting-the-firmware.

Afterwards, the terminal outputs something like this:

saved 5214 bytes to saleae-logic16-fx2.fw
saved 149516 bytes to saleae-logic16-fpga-18.bitstream
saved 149516 bytes to saleae-logic16-fpga-33.bitstream

There are more files produced, but only these three are what we need.

If sigrok-firmware library is installed, then you have a directory "~/../../usr/local/share/sigrok-firmware". This is where we put the three extracted files.

sudo cp -a $(dir)/saleae-logic16-fpga-18.bitstream ~/../../usr/local/share/sigrok-firmware/
sudo cp -a $(dir)/saleae-logic16-fpga-33.bitstream ~/../../usr/local/share/sigrok-firmware/
sudo cp -a $(dir)/saleae-logic16-fx2.fw ~/../../usr/local/share/sigrok-firmware/

sudo cp -a ~/Downloads/Logic_/saleae-logic16-fpga-18.bitstream ~/../../usr/local/share/sigrok-firmware/
sudo cp -a ~/Downloads/Logic_/saleae-logic16-fpga-33.bitstream ~/../../usr/local/share/sigrok-firmware/
sudo cp -a ~/Downloads/Logic_/saleae-logic16-fx2.fw ~/../../usr/local/share/sigrok-firmware/

sudo is necessary since we are copying into permission required directory.

Once that's done, we are all set.

--------------------------------------------
Running the tool
--------------------------------------------
Refer to the man page for details. Also in this website: https://sigrok.org/wiki/Sigrok-cli.

Here's one run of it that collects data at 1mHz sample rate for 1s and the data being saved in the form of csv, (timestamped comma-separated numbers?), in the name "data.txt".

sudo sigrok-cli --driver saleae-logic16 --time 1s --config samplerate=1m -o data.txt -O csv


In the future to have multiple devices running simultaneously, read the following:
#
 Drivers communicating with hardware via  a  serial  port	always
	      need  the port specified as the conn option. For example, to use
	      the Openbench Logic Sniffer:

		$ sigrok-cli --driver=ols:conn=/dev/ttyACM0

	      Some USB devices don't use a unique VendorID/ProductID  combina-
	      tion,  and  thus need that specified as well. This also uses the
	      conn option, using either VendorID.ProductID or bus.address:

		$ sigrok-cli --driver=uni-t-ut61e:conn=1a86.e008
#

Basically, VendorID.ProductID is needed. Check addition "Useful command section".

-----------------

Other supported formats:
  analog               ASCII analog data values and units
  ascii                ASCII art logic data
  binary               Raw binary logic data
  bits                 0/1 digits logic data
  chronovu-la8         ChronoVu LA8 native file format data
  csv                  Comma-separated values
  hex                  Hexadecimal digits logic data
  null                 Null output (discards all data)
  ols                  OpenBench Logic Sniffer data
  srzip                srzip session file format data
  vcd                  Value Change Dump data
  wav                  Microsoft WAV file format data

We can try to see the tradeoffs of each and pick the one we want.

A sample segment of a csv output file is put in "SampleDataFiles"

Feel free to play with other flag options

--------------------------------------------
Useful additional command
--------------------------------------------

lsusb to see id's for attached devices





--------------------------------------------
Records
--------------------------------------------
sudo sigrok-cli --driver saleae-logic16:conn=21a9.1001 --time 5s --config samplerate=1m -o data5s.txt -O csv
Device only sent 337920 samples.

sudo sigrok-cli --driver saleae-logic16:conn=21a9.1001 --time 1s --config samplerate=1m -o data1s.txt -O csv
Device only sent 337920 samples.

sudo sigrok-cli --driver saleae-logic16:conn=21a9.1001 --time 337 --config samplerate=1m -o data337ms.txt -O csv

----comments----
Supposedly, we should get 5000000 for 5s, but it seems to have capped at this number

https://sigrok.org/bugzilla/show_bug.cgi?id=762
"But I found a (ugly) workaround, and that is why I'm adding this comment: I am now running my script from /dev/shm. I have my dump at each first attempt of any test case.

This is platform dependent, so buffering is still the way to go for a proper fix."
--------------------------------------------
No use for now
--------------------------------------------
Saleae protocol

https://sigrok.org/wiki/Saleae_Logic16#Protocol


sigrok-cli --driver fx2lafw -d samplerate=100khz --samples 1024 -O ascii -p 1

